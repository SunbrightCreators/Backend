# Generated by Django 5.2.4 on 2025-08-25 08:15

import accounts.managers
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_nanoid.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': '이미 존재하는 이메일입니다.'}, max_length=254, unique=True)),
                ('id', django_nanoid.models.NANOIDField(alphabetically='abcdefghijklmnopqrstuvwxyz0123456789', prefix=None, primary_key=True, secure_generated=True, serialize=False, size=21, verbose_name='ID')),
                ('is_marketing_allowed', models.BooleanField(default=False, help_text='마케팅 및 메시지 수신 동의')),
                ('name', models.CharField(help_text='이름(실명)', max_length=10)),
                ('birth', models.CharField(help_text='생년월일 (YYMMDD 고정 6자리 표기)', max_length=6)),
                ('sex', models.CharField(choices=[('WOMAN', '여성'), ('MAN', '남성')], help_text='성별', max_length=5)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='user/profile_image')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', accounts.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Founder',
            fields=[
                ('id', django_nanoid.models.NANOIDField(alphabetically='abcdefghijklmnopqrstuvwxyz0123456789', prefix=None, primary_key=True, secure_generated=True, serialize=False, size=21)),
                ('industry', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('FOOD_DINING', '외식/음식점'), ('CAFE_DESSERT', '카페/디저트'), ('PUB_BAR', '주점'), ('CONVENIENCE_RETAIL', '편의점/소매'), ('GROCERY_MART', '마트/식료품'), ('BEAUTY_CARE', '뷰티/미용'), ('HEALTH_FITNESS', '건강'), ('FASHION_GOODS', '패션/잡화'), ('HOME_LIVING_INTERIOR', '생활용품/가구'), ('HOBBY_LEISURE', '취미/오락/여가'), ('CULTURE_BOOKS', '문화/서적'), ('PET', '반려동물'), ('LODGING', '숙박'), ('EDUCATION_ACADEMY', '교육/학원'), ('AUTO_TRANSPORT', '자동차/운송'), ('IT_OFFICE', 'IT/사무'), ('FINANCE_LEGAL_TAX', '금융/법률/회계'), ('MEDICAL_PHARMA', '의료/의약'), ('PERSONAL_SERVICES', '생활 서비스'), ('FUNERAL_WEDDING', '장례/예식'), ('PHOTO_STUDIO', '사진/스튜디오'), ('OTHER_RETAIL', '기타 판매업'), ('OTHER_SERVICE', '기타 서비스업')], max_length=24), size=3)),
                ('address', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(default=dict), size=2)),
                ('target', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('LOCAL', '동네주민'), ('STRANGER', '외부인')], max_length=8), size=2)),
                ('business_hours', models.JSONField(default=dict, help_text='\n        {\n            "start": "09:00",\n            "end": "18:00"\n        }\n        ')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='founder', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Proposer',
            fields=[
                ('id', django_nanoid.models.NANOIDField(alphabetically='abcdefghijklmnopqrstuvwxyz0123456789', prefix=None, primary_key=True, secure_generated=True, serialize=False, size=21)),
                ('industry', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('FOOD_DINING', '외식/음식점'), ('CAFE_DESSERT', '카페/디저트'), ('PUB_BAR', '주점'), ('CONVENIENCE_RETAIL', '편의점/소매'), ('GROCERY_MART', '마트/식료품'), ('BEAUTY_CARE', '뷰티/미용'), ('HEALTH_FITNESS', '건강'), ('FASHION_GOODS', '패션/잡화'), ('HOME_LIVING_INTERIOR', '생활용품/가구'), ('HOBBY_LEISURE', '취미/오락/여가'), ('CULTURE_BOOKS', '문화/서적'), ('PET', '반려동물'), ('LODGING', '숙박'), ('EDUCATION_ACADEMY', '교육/학원'), ('AUTO_TRANSPORT', '자동차/운송'), ('IT_OFFICE', 'IT/사무'), ('FINANCE_LEGAL_TAX', '금융/법률/회계'), ('MEDICAL_PHARMA', '의료/의약'), ('PERSONAL_SERVICES', '생활 서비스'), ('FUNERAL_WEDDING', '장례/예식'), ('PHOTO_STUDIO', '사진/스튜디오'), ('OTHER_RETAIL', '기타 판매업'), ('OTHER_SERVICE', '기타 서비스업')], max_length=24), size=3)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='proposer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProposerLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.JSONField(default=dict)),
                ('level', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposer_level', to='accounts.proposer')),
            ],
        ),
        migrations.CreateModel(
            name='LocationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('address', models.JSONField(default=dict, help_text='\n        {\n            "sido": "전라남도",\n            "sigungu": "광양시",\n            "eupmyundong": "광양읍"\n        }\n        ')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_history', to='accounts.proposer')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'created_at'), name='unique_user_created_at')],
            },
        ),
        migrations.CreateModel(
            name='PushSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('endpoint', models.URLField(max_length=500)),
                ('p256dh_key', models.CharField(max_length=100)),
                ('auth_key', models.CharField(max_length=50)),
                ('is_main', models.BooleanField()),
                ('is_active', models.BooleanField(default=True)),
                ('last_success', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'endpoint'), name='unique_user_endpoint')],
            },
        ),
    ]
